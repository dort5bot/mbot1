#.github/workflows/docker-deploy.yml
name: 🐳 Docker Build & Deploy

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*.*.*' ]
  pull_request:
    branches: [ main, master ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  docker-build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: docker-build
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - name: Check deployment triggers
        run: |
          echo "📦 Image built successfully: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
          echo "🏷 Tags: ${{ needs.docker-build.outputs.tags }}"
          
      # Render deployment (opsiyonel)
      - name: Trigger Render Deploy
        if: secrets.RENDER_DEPLOY_HOOK != ''
        run: |
          echo "🚀 Triggering Render deployment..."
          curl -X POST ${{ secrets.RENDER_DEPLOY_HOOK }}

      # Oracle VPS deployment (opsiyonel)
      - name: Deploy to Oracle VPS
        if: secrets.ORACLE_SSH_KEY != '' && secrets.ORACLE_HOST != ''
        env:
          SSH_PRIVATE_KEY: ${{ secrets.ORACLE_SSH_KEY }}
        run: |
          echo "🚀 Deploying to Oracle VPS..."
          
          # SSH key oluştur
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          
          # SSH ile deploy komutlarını çalıştır
          ssh -o StrictHostKeyChecking=no \
              -i ~/.ssh/deploy_key \
              ${{ secrets.ORACLE_USER || 'ubuntu' }}@${{ secrets.ORACLE_HOST }} << 'EOF'
            # Docker image'ı çek
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            
            # Eski container'ı durdur ve sil
            docker stop mbot1 || true
            docker rm mbot1 || true
            
            # Yeni container'ı başlat
            docker run -d \
              --name mbot1 \
              --restart unless-stopped \
              -p 3000:3000 \
              -e TZ=UTC \
              --health-cmd="curl -f http://localhost:3000/health || exit 1" \
              --health-interval=30s \
              --health-timeout=10s \
              --health-retries=3 \
              ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
              
            # Sistem temizliği
            docker system prune -f
          EOF
