name: üê≥ Docker Build & Deploy    #Final-1: temizlik eklendi

on:
  push:
    branches: [main, master]
    tags: ['v*.*']
  pull_request:
    branches: [main, master]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  CONTAINER_NAME: mbot1
  # Secrets'ƒ± env deƒüi≈ükenlerine ata
  RENDER_DEPLOY_HOOK: ${{ secrets.RENDER_DEPLOY_HOOK }}
  ORACLE_SSH_KEY: ${{ secrets.ORACLE_SSH_KEY }}
  ORACLE_HOST: ${{ secrets.ORACLE_HOST }}
  ORACLE_USER: ${{ secrets.ORACLE_USER }}

jobs:
  pre-cleanup:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Pre-build cleanup
        run: |
          echo "üßπ Pre-build manual cleanup started..."
          
          # Docker sistem temizliƒüi
          docker system prune -f || true
          docker builder prune -f || true
          docker buildx prune -f || true
          docker volume prune -f || true
          
          # Disk temizliƒüi
          sudo rm -rf /tmp/* || true
          sudo apt-get clean || true
          
          # GitHub Actions cache temizliƒüi (manuel)
          sudo apt-get update && sudo apt-get install -y jq gh
          echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token || true

          #
          # 3 g√ºnden eski cache'leri temizle (daha agresif) + Her build √∂ncesi temizlik + 
          #
          CACHE_LIST=$(gh api repos/${{ github.repository }}/actions/caches 2>/dev/null | jq -r '.actions_caches[] | select(.last_accessed_at < "'$(date -d '3 days ago' -u +"%Y-%m-%dT%H:%M:%SZ")'") | .id' 2>/dev/null) || true
          
          if [ -n "$CACHE_LIST" ]; then
            for cache_id in $CACHE_LIST; do
              echo "üóëÔ∏è Deleting cache: $cache_id"
              gh api repos/${{ github.repository }}/actions/caches/$cache_id -X DELETE || true
            done
            echo "‚úÖ Pre-build cache cleanup completed"
          else
            echo "‚úÖ No old caches to clean up before build"
          fi

  docker-build:
    needs: pre-cleanup
    runs-on: ubuntu-latest
    timeout-minutes: 15  #15 dakika sonra temizlik
    permissions:
      contents: read
      packages: write

    outputs:
      tags: ${{ steps.meta.outputs.tags }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Comprehensive post-build cleanup
        if: always()
        run: |
          echo "üßπ Comprehensive post-build cleanup..."
          
          # Docker kapsamlƒ± temizlik
          docker system prune -a -f --volumes || true
          docker builder prune -a -f || true
          docker buildx prune -a -f || true
          docker image prune -a -f || true
          docker container prune -f || true
          docker volume prune -f || true
          docker network prune -f || true
          
          # Disk temizliƒüi
          sudo rm -rf /var/lib/apt/lists/* || true
          sudo rm -rf /tmp/* || true
          sudo apt-get autoremove -y || true
          sudo apt-get clean || true
          
          echo "‚úÖ Post-build cleanup completed"

      - name: Aggressive GitHub Actions cache cleanup
        if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
        run: |
          echo "üßπ Aggressive GitHub Actions cache cleanup..."
          sudo apt-get update && sudo apt-get install -y jq gh
          echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token
          
          # T√ºm cache'leri listeleyip 1 g√ºnden eski olanlarƒ± sil (√ßok agresif)
          CACHE_LIST=$(gh api repos/${{ github.repository }}/actions/caches \
            | jq -r '.actions_caches[] | select(.last_accessed_at < "'$(date -d '1 day ago' -u +"%Y-%m-%dT%H:%M:%SZ")'") | .id')
          
          if [ -n "$CACHE_LIST" ]; then
            echo "üóëÔ∏è Deleting old caches:"
            for cache_id in $CACHE_LIST; do
              echo "Deleting cache ID: $cache_id"
              gh api repos/${{ github.repository }}/actions/caches/$cache_id -X DELETE || true
            done
            echo "‚úÖ Aggressive cache cleanup completed"
          else
            echo "‚úÖ No caches to clean up aggressively"
          fi

  deploy:
    needs: docker-build
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    timeout-minutes: 40
    steps:
      - name: Pre-deploy cleanup
        run: |
          echo "üßπ Pre-deploy manual cleanup..."
          docker system prune -f || true
          docker image prune -f || true

      - name: Check deployment triggers
        run: |
          echo "üì¶ Image built successfully: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
          echo "üè∑ Tags: ${{ needs.docker-build.outputs.tags }}"

      - name: Trigger Render Deploy
        if: env.RENDER_DEPLOY_HOOK != ''
        run: |
          echo "üöÄ Triggering Render deployment..."
          curl -s -X POST "${{ env.RENDER_DEPLOY_HOOK }}"
          echo "‚úÖ Render deployment triggered successfully"

      - name: Deploy to Oracle VPS
        if: env.ORACLE_SSH_KEY != '' && env.ORACLE_HOST != ''
        env:
          SSH_PRIVATE_KEY: ${{ env.ORACLE_SSH_KEY }}
        run: |
          echo "üöÄ Deploying to Oracle VPS..."
          USER="${{ env.ORACLE_USER }}"
          USER=${USER:-ubuntu}
          echo "üë§ Using user: $USER"
          echo "üìù Using host: ${{ env.ORACLE_HOST }}"
          echo "üì¶ Container name: ${{ env.CONTAINER_NAME }}"

          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H "${{ env.ORACLE_HOST }}" >> ~/.ssh/known_hosts

          # Kapsamlƒ± temizlik ve deploy
          ssh -i ~/.ssh/deploy_key $USER@${{ env.ORACLE_HOST }} << 'EOF'
            DOCKER_REGISTRY="${{ env.REGISTRY }}"
            DOCKER_IMAGE_NAME="${{ env.IMAGE_NAME }}"
            CONTAINER_NAME="${{ env.CONTAINER_NAME }}"
            
            echo "üßπ Pre-deploy cleanup on VPS..."
            docker system prune -f
            docker image prune -f
            docker container prune -f
            docker volume prune -f
            docker network prune -f
          
            echo "üê≥ Pulling Docker image: \$DOCKER_REGISTRY/\$DOCKER_IMAGE_NAME:latest"
            docker pull "\$DOCKER_REGISTRY/\$DOCKER_IMAGE_NAME:latest"
          
            echo "üõë Stopping old container..."
            docker stop "\$CONTAINER_NAME" 2>/dev/null || true
            docker rm "\$CONTAINER_NAME" 2>/dev/null || true
          
            echo "üöÄ Starting new container..."
            docker run -d \
              --name "\$CONTAINER_NAME" \
              --restart unless-stopped \
              -p 3000:3000 \
              -e TZ=UTC \
              --health-cmd="curl -f http://localhost:3000/health || exit 1" \
              --health-interval=30s \
              --health-timeout=10s \
              --health-retries=3 \
              "\$DOCKER_REGISTRY/\$DOCKER_IMAGE_NAME:latest"

            echo "üìú Last 100 logs from container..."
            docker logs --tail 100 "\$CONTAINER_NAME"
            
            echo "üßπ Post-deploy cleanup on VPS..."
            docker image prune -f --filter "until=2h"   # 2 saatten eski image'larƒ± sil
            docker system prune -f
            
            echo "üìä Final container status:"
            docker ps --filter "name=\$CONTAINER_NAME" --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
          EOF

      - name: Final cleanup
        if: always()
        run: |
          echo "üßπ Final cleanup after deployment..."
          docker system prune -f || true
          sudo rm -rf ~/.ssh/deploy_key || true
