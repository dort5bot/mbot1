"""
handlers/p_handler.py
/p â†’CONFIG.SCAN_SYMBOLS default(filtre ekler btc ile btcusdt sonuÃ§ verir)
/P n â†’ sayÄ± girilirse hacimli ilk n coin
/P d â†’ dÃ¼ÅŸenler.
/P coin1 coin2... â†’ manuel seÃ§ili coinler.
Binance datasÄ±nda kÃ¼Ã§Ã¼k/bÃ¼yÃ¼k fark olsa da eÅŸleÅŸir.
async uyumlu + PEP8 + type hints + docstring + async yapÄ± + singleton + logging olacak
"""

import logging
import os
from typing import List, Optional, Dict, Any, Set
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes
from utils.binance.binance_a import get_binance_client

LOG = logging.getLogger(__name__)
LOG.addHandler(logging.NullHandler())

COMMAND: str = "P"
HELP: str = (
    "/P â†’ ENV'deki SCAN_SYMBOLS listesi (hacme gÃ¶re sÄ±ralÄ±)\n"
    "/P n â†’ En Ã§ok yÃ¼kselen n coin (varsayÄ±lan 20)\n"
    "/P d â†’ En Ã§ok dÃ¼ÅŸen 20 coin\n"
    "/P coin1 coin2 ... â†’ Belirtilen coin(ler)"
)

# ENV'den SCAN_SYMBOLS oku ve normalize et
SCAN_SYMBOLS: List[str] = [
    s.strip().upper() if s.strip().endswith("USDT") else s.strip().upper() + "USDT"
    for s in os.getenv(
        "SCAN_SYMBOLS",
        "BTCUSDT,ETHUSDT,BNBUSDT,SOLUSDT,TRXUSDT,CAKEUSDT,SUIUSDT,PEPEUSDT,ARPAUSDT,TURBOUSDT"
    ).split(",")
]


def normalize_symbol(sym: str) -> str:
    """Sembol adÄ±nÄ± normalize eder (Ã¶r. bnb â†’ BNBUSDT)."""
    sym = sym.strip().upper()
    if not sym.endswith("USDT"):
        sym += "USDT"
    return sym


async def fetch_ticker_data(
    symbols: Optional[List[str]] = None,
    descending: bool = True,
    sort_by: str = "change",
    limit: Optional[int] = None
) -> List[Dict[str, Any]]:
    """
    Binance'ten ticker verilerini alÄ±r, filtreler ve sÄ±ralar.

    Args:
        symbols (Optional[List[str]]): Ä°stenen semboller (Ã¶rn: ["BTC", "ETHUSDT"]).
        descending (bool): SÄ±ralama yÃ¶nÃ¼. Default True.
        sort_by (str): "change" veya "volume".
        limit (Optional[int]): KaÃ§ adet sonuÃ§ dÃ¶neceÄŸi.

    Returns:
        List[Dict[str, Any]]: Ticker verileri.
    """
    try:
        api = get_binance_client(None, None)
        data: List[Dict[str, Any]] = await api.get_all_24h_tickers()

        if not data:
            LOG.warning("Binance'ten veri alÄ±namadÄ±")
            return []

        # Sadece USDT pariteleri
        usdt_pairs: List[Dict[str, Any]] = [
            d for d in data if d.get("symbol", "").upper().endswith("USDT")
        ]

        # Ä°stenen coinler varsa filtrele
        if symbols:
            wanted: Set[str] = {normalize_symbol(s) for s in symbols}
            usdt_pairs = [
                d for d in usdt_pairs if d.get("symbol", "").upper() in wanted
            ]

        # SÄ±ralama
        if sort_by == "volume":
            usdt_pairs.sort(key=lambda x: float(x["quoteVolume"]), reverse=True)
        else:
            usdt_pairs.sort(
                key=lambda x: float(x["priceChangePercent"]),
                reverse=descending
            )

        return usdt_pairs[:limit] if limit else usdt_pairs

    except Exception as e:
        LOG.error(f"Ticker verisi alÄ±nÄ±rken hata: {e}")
        return []


def format_report(data: List[Dict[str, Any]], title: str) -> str:
    """Ticker verilerini okunabilir bir rapor formatÄ±na dÃ¶nÃ¼ÅŸtÃ¼rÃ¼r."""
    if not data:
        return "GÃ¶sterilecek veri yok."

    lines: List[str] = [f"ğŸ“ˆ {title}", "âš¡Coin | DeÄŸiÅŸim | Hacim | Fiyat"]

    for i, coin in enumerate(data, start=1):
        try:
            symbol: str = coin["symbol"].replace("USDT", "")
            change: float = float(coin["priceChangePercent"])
            vol_usd: float = float(coin["quoteVolume"])
            price: float = float(coin["lastPrice"])

            # Hacim formatÄ±
            if vol_usd >= 1_000_000_000:
                vol_fmt = f"${vol_usd/1_000_000_000:.1f}B"
            elif vol_usd >= 1_000_000:
                vol_fmt = f"${vol_usd/1_000_000:.1f}M"
            else:
                vol_fmt = f"${vol_usd:,.0f}"

            lines.append(
                f"{i}. {symbol}: {change:+.2f}% | {vol_fmt} | {price:.8f}"
            )

        except (KeyError, ValueError) as e:
            LOG.warning(f"Veri formatlama hatasÄ±: {e}")
            continue

    return "\n".join(lines)


async def p_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """/P komutunu iÅŸler ve kripto para verilerini gÃ¶sterir."""
    try:
        if not update.message:
            return

        args: List[str] = context.args or []

        if not args:
            # /P â†’ ENV'deki SCAN_SYMBOLS, hacme gÃ¶re sÄ±ralÄ±
            data = await fetch_ticker_data(symbols=SCAN_SYMBOLS, sort_by="volume")
            title = "SCAN_SYMBOLS (Hacme GÃ¶re)"
        elif args[0].lower() == "d":
            # /P d â†’ DÃ¼ÅŸenler
            data = await fetch_ticker_data(descending=False, limit=20)
            title = "DÃ¼ÅŸÃ¼ÅŸ Trendindeki Coinler"
        elif args[0].isdigit():
            # /P n â†’ n sayÄ±da coin
            n: int = min(int(args[0]), 50)  # Maksimum 50 coin gÃ¶sterilsin
            data = await fetch_ticker_data(descending=True, limit=n)
            title = f"En Ã‡ok YÃ¼kselen {n} Coin"
        else:
            # /P coin1 coin2... â†’ Manuel seÃ§im
            data = await fetch_ticker_data(symbols=args)
            title = "SeÃ§ili Coinler"

        if not data:
            await update.message.reply_text(
                "Veri alÄ±namadÄ± veya eÅŸleÅŸen sembol bulunamadÄ±."
            )
            return

        report: str = format_report(data, title)

        # Telegram mesaj sÄ±nÄ±rÄ± (4096 karakter) kontrolÃ¼
        if len(report) > 4096:
            report = (
                report[:4000]
                + "\n...\n(Mesaj sÄ±nÄ±rÄ± aÅŸÄ±ldÄ±, bazÄ± veriler gÃ¶sterilemiyor)"
            )

        await update.message.reply_text(report)

    except Exception as e:
        LOG.error(f"/P komutu iÅŸlenirken hata: {e}")
        await update.message.reply_text("Bir hata oluÅŸtu. LÃ¼tfen daha sonra tekrar deneyin.")


def register(application: Application) -> None:
    """Telegram botu iÃ§in komut iÅŸleyicilerini kaydeder."""
    try:
        application.add_handler(CommandHandler("p", p_handler))
        application.add_handler(CommandHandler("P", p_handler))
        LOG.info("P handler baÅŸarÄ±yla kaydedildi.")
    except Exception as e:
        LOG.error(f"P handler kaydedilirken hata: {e}")


