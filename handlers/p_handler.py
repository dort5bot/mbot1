# handlers/p_handler.py
# handlers/p_handler.py
#- 	/p ‚ÜíCONFIG.SCAN_SYMBOLS default(filtre ekler btc ile btcusdt sonu√ß verir)
#- 	/P n ‚Üí sayƒ± girilirse limit = n oluyor.
#- 	/P d ‚Üí d√º≈üenler.
#- 	/P coin1 coin2... ‚Üí manuel se√ßili coinler.

import logging
import os
from typing import List, Optional, Dict, Any
from telegram import Update
from telegram.ext import CommandHandler, ContextTypes
from utils.binance.binance_a import get_binance_client

LOG = logging.getLogger(__name__)
LOG.addHandler(logging.NullHandler())

COMMAND = "P"
HELP = (
    "/P ‚Üí ENV'deki SCAN_SYMBOLS listesi (hacme g√∂re sƒ±ralƒ±)\n"
    "/P n ‚Üí En √ßok y√ºkselen n coin (varsayƒ±lan 20)\n"
    "/P d ‚Üí En √ßok d√º≈üen 20 coin\n"
    "/P coin1 coin2 ... ‚Üí Belirtilen coin(ler)"
)

# ENV'den SCAN_SYMBOLS oku
SCAN_SYMBOLS = os.getenv(
    "SCAN_SYMBOLS",
    "BTCUSDT,ETHUSDT,BNBUSDT,SOLUSDT,TRXUSDT,CAKEUSDT,SUIUSDT,PEPEUSDT,ARPAUSDT,TURBOUSDT"
).split(",")


def normalize_symbol(sym: str) -> str:
    """
    Sembol adƒ±nƒ± normalize eder (b√ºy√ºk harfe √ßevirir ve USDT ekler).
    
    Args:
        sym: Normalize edilecek sembol adƒ±
        
    Returns:
        Normalize edilmi≈ü sembol adƒ± (√∂rn: 'BTC' ‚Üí 'BTCUSDT')
    """
    sym = sym.upper()
    if not sym.endswith("USDT"):
        sym += "USDT"
    return sym


async def fetch_ticker_data(
    symbols: Optional[List[str]] = None, 
    descending: bool = True, 
    sort_by: str = "change"
) -> List[Dict[str, Any]]:
    """
    Binance'ten ticker verilerini alƒ±r ve filtreler/sƒ±ralar.
    
    Args:
        symbols: ƒ∞stenen sembol listesi (None ise t√ºm USDT √ßiftleri)
        descending: Sƒ±ralama y√∂n√º (True: azalan, False: artan)
        sort_by: Sƒ±ralama kriteri ("change" veya "volume")
        
    Returns:
        Filtrelenmi≈ü ve sƒ±ralanmƒ±≈ü ticker verileri listesi
    """
    try:
        api = get_binance_client(None, None)  # Global instance
        data = await api.get_all_24h_tickers()
        
        if not data:
            LOG.warning("Binance'ten veri alƒ±namadƒ±")
            return []
            
        # Sadece USDT pariteleri
        usdt_pairs = [d for d in data if d["symbol"].endswith("USDT")]
        
        # ƒ∞stenen coinler varsa filtrele
        if symbols:
            wanted = {normalize_symbol(s) for s in symbols}
            usdt_pairs = [d for d in usdt_pairs if d["symbol"] in wanted]
            
        # Sƒ±ralama
        if sort_by == "volume":
            usdt_pairs.sort(key=lambda x: float(x["quoteVolume"]), reverse=True)
        else:
            usdt_pairs.sort(
                key=lambda x: float(x["priceChangePercent"]), 
                reverse=descending
            )
            
        return usdt_pairs[:20]
        
    except Exception as e:
        LOG.error(f"Ticker verisi alƒ±nƒ±rken hata: {e}")
        return []


def format_report(data: List[Dict[str, Any]], title: str) -> str:
    """
    Ticker verilerini okunabilir bir rapor formatƒ±na d√∂n√º≈üt√ºr√ºr.
    
    Args:
        data: Ticker verileri listesi
        title: Rapor ba≈ülƒ±ƒüƒ±
        
    Returns:
        Bi√ßimlendirilmi≈ü rapor metni
    """
    if not data:
        return "G√∂sterilecek veri yok."
        
    lines = [f"üìà {title}", "‚ö°Coin | Deƒüi≈üim | Hacim | Fiyat"]
    
    for i, coin in enumerate(data, start=1):
        try:
            symbol = coin["symbol"].replace("USDT", "")
            change = float(coin["priceChangePercent"])
            vol_usd = float(coin["quoteVolume"])
            price = float(coin["lastPrice"])
            
            # Hacim M veya B formatƒ±
            if vol_usd >= 1_000_000_000:
                vol_fmt = f"${vol_usd/1_000_000_000:.1f}B"
            else:
                vol_fmt = f"${vol_usd/1_000_000:.1f}M"
                
            lines.append(f"{i}. {symbol}: {change:.2f}% | {vol_fmt} | {price}")
            
        except (KeyError, ValueError) as e:
            LOG.warning(f"Veri formatlama hatasƒ±: {e}")
            continue
            
    return "\n".join(lines)


async def p_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    /P komutunu i≈üler ve kripto para verilerini g√∂sterir.
    
    Args:
        update: Telegram g√ºncelleme nesnesi
        context: Telegram baƒülam nesnesi
    """
    try:
        args = context.args
        
        if not args:
            # /P ‚Üí ENV'deki SCAN_SYMBOLS, hacme g√∂re sƒ±ralƒ±
            data = await fetch_ticker_data(symbols=SCAN_SYMBOLS, sort_by="volume")
            title = "SCAN_SYMBOLS (Hacme G√∂re)"
        elif args[0].lower() == "d":
            data = await fetch_ticker_data(descending=False)
            title = "D√º≈ü√º≈ü Trendindeki Coinler"
        elif args[0].isdigit():
            n = int(args[0])
            data = await fetch_ticker_data(descending=True)
            data = data[:n] if n <= len(data) else data
            title = f"En √áok Y√ºkselen {n} Coin"
        else:
            data = await fetch_ticker_data(symbols=args)
            title = "Se√ßili Coinler"
            
        if not data:
            await update.message.reply_text("Veri alƒ±namadƒ± veya e≈üle≈üen sembol bulunamadƒ±.")
            return
            
        report = format_report(data, title)
        await update.message.reply_text(report)
        
    except Exception as e:
        LOG.error(f"/P komutu i≈ülenirken hata: {e}")
        await update.message.reply_text("Bir hata olu≈ütu. L√ºtfen daha sonra tekrar deneyin.")


def register(application) -> None:
    """
    Telegram botu i√ßin komut i≈üleyicilerini kaydeder.
    
    Args:
        application: Telegram bot uygulama nesnesi
    """
    try:
        for cmd in ("P", "p"):  # B√ºy√ºk/k√º√ß√ºk harf desteƒüi
            application.add_handler(CommandHandler(cmd, p_handler))
            
        LOG.info("P handler ba≈üarƒ±yla kaydedildi.")
        
    except Exception as e:
        LOG.error(f"P handler kaydedilirken hata: {e}")
