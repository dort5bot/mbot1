"""
handlers/p_handler.py
binance_a.py uyunlu
/p ‚ÜíCONFIG.SCAN_SYMBOLS default(filtre ekler btc ile btcusdt sonu√ß verir)
/P n ‚Üí sayƒ± girilirse hacimli ilk n coin
/P d ‚Üí d√º≈üenler.
/P coin1 coin2... ‚Üí manuel se√ßili coinler.
Binance datasƒ±nda k√º√ß√ºk/b√ºy√ºk fark olsa da e≈üle≈üir.
async uyumlu + PEP8 + type hints + docstring + async yapƒ± + singleton + logging olacak

sorun olursa komut yapƒ±sƒ± 
/p,pn,pd,p coin
"""

import logging
import os
from typing import List, Optional, Dict, Any, Set
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes

# Binance client import - g√ºncellenmi≈ü yapƒ±ya g√∂re
from utils.binance.binance_a import BinanceClient

LOG = logging.getLogger(__name__)
LOG.addHandler(logging.NullHandler())

COMMAND: str = "P"
HELP: str = (
    "/P ‚Üí ENV'deki SCAN_SYMBOLS listesi (hacme g√∂re sƒ±ralƒ±)\n"
    "/P n ‚Üí En √ßok y√ºkselen n coin (varsayƒ±lan 20)\n"
    "/P d ‚Üí En √ßok d√º≈üen 20 coin\n"
    "/P coin1 coin2 ... ‚Üí Belirtilen coin(ler)"
)

# ENV'den SCAN_SYMBOLS oku ve normalize et
SCAN_SYMBOLS: List[str] = [
    s.strip().upper() if s.strip().endswith("USDT") else s.strip().upper() + "USDT"
    for s in os.getenv(
        "SCAN_SYMBOLS",
        "BTCUSDT,ETHUSDT,BNBUSDT,SOLUSDT,TRXUSDT,CAKEUSDT,SUIUSDT,PEPEUSDT,ARPAUSDT,TURBOUSDT"
    ).split(",")
]

# Singleton Binance client instance
_binance_client: Optional[BinanceClient] = None


async def get_binance_client() -> BinanceClient:
    """
    Binance client singleton instance'ƒ±nƒ± d√∂nd√ºr√ºr.
    
    Returns:
        BinanceClient: Binance API client instance
    """
    global _binance_client
    if _binance_client is None:
        # Environment variables'dan API key'leri al
        api_key = os.getenv("BINANCE_API_KEY")
        secret_key = os.getenv("BINANCE_API_SECRET")
        
        _binance_client = BinanceClient(api_key=api_key, secret_key=secret_key)
        LOG.info("Binance client initialized")
    
    return _binance_client


def normalize_symbol(sym: str) -> str:
    """
    Sembol adƒ±nƒ± normalize eder (√∂r. bnb ‚Üí BNBUSDT).
    
    Args:
        sym: Sembol adƒ±
        
    Returns:
        Normalize edilmi≈ü sembol adƒ±
    """
    sym = sym.strip().upper()
    if not sym.endswith("USDT"):
        sym += "USDT"
    return sym


async def fetch_ticker_data(
    symbols: Optional[List[str]] = None,
    descending: bool = True,
    sort_by: str = "change",
    limit: Optional[int] = None
) -> List[Dict[str, Any]]:
    """
    Binance'ten ticker verilerini alƒ±r, filtreler ve sƒ±ralar.

    Args:
        symbols: ƒ∞stenen semboller (√∂rn: ["BTC", "ETHUSDT"])
        descending: Sƒ±ralama y√∂n√º. Default True
        sort_by: "change" veya "volume"
        limit: Ka√ß adet sonu√ß d√∂neceƒüi

    Returns:
        Ticker verileri listesi
    """
    try:
        # Binance client'ƒ± al
        client = await get_binance_client()
        
        # T√ºm ticker verilerini al
        all_tickers = await client.public.get_all_24h_tickers()
        
        if not all_tickers:
            LOG.warning("Binance'ten veri alƒ±namadƒ±")
            return []

        # Sadece USDT pariteleri
        usdt_pairs: List[Dict[str, Any]] = [
            d for d in all_tickers if isinstance(d, dict) and 
            d.get("symbol", "").upper().endswith("USDT")
        ]

        # ƒ∞stenen coinler varsa filtrele
        if symbols:
            wanted: Set[str] = {normalize_symbol(s) for s in symbols}
            usdt_pairs = [
                d for d in usdt_pairs if d.get("symbol", "").upper() in wanted
            ]

        # Sƒ±ralama
        if sort_by == "volume":
            usdt_pairs.sort(
                key=lambda x: float(x.get("quoteVolume", 0)), 
                reverse=descending
            )
        else:
            usdt_pairs.sort(
                key=lambda x: float(x.get("priceChangePercent", 0)),
                reverse=descending
            )

        return usdt_pairs[:limit] if limit else usdt_pairs

    except Exception as e:
        LOG.error(f"Ticker verisi alƒ±nƒ±rken hata: {e}")
        return []


def format_report(data: List[Dict[str, Any]], title: str) -> str:
    """
    Ticker verilerini okunabilir bir rapor formatƒ±na d√∂n√º≈üt√ºr√ºr.
    
    Args:
        data: Ticker verileri
        title: Rapor ba≈ülƒ±ƒüƒ±
        
    Returns:
        Formatlanmƒ±≈ü rapor metni
    """
    if not data:
        return "G√∂sterilecek veri yok."

    lines: List[str] = [f"üìà {title}", "‚ö°Coin | Deƒüi≈üim | Hacim | Fiyat"]

    for i, coin in enumerate(data, start=1):
        try:
            symbol: str = coin.get("symbol", "").replace("USDT", "")
            change: float = float(coin.get("priceChangePercent", 0))
            vol_usd: float = float(coin.get("quoteVolume", 0))
            price: float = float(coin.get("lastPrice", 0))

            # Hacim formatƒ±
            if vol_usd >= 1_000_000_000:
                vol_fmt = f"${vol_usd/1_000_000_000:.1f}B"
            elif vol_usd >= 1_000_000:
                vol_fmt = f"${vol_usd/1_000_000:.1f}M"
            else:
                vol_fmt = f"${vol_usd:,.0f}"

            lines.append(
                f"{i}. {symbol}: {change:+.2f}% | {vol_fmt} | {price:.8f}"
            )

        except (KeyError, ValueError, TypeError) as e:
            LOG.warning(f"Veri formatlama hatasƒ±: {e}, coin: {coin.get('symbol', 'unknown')}")
            continue

    return "\n".join(lines)


async def p_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    /P komutunu i≈üler ve kripto para verilerini g√∂sterir.
    
    Args:
        update: Telegram update object
        context: Telegram context object
    """
    try:
        if not update.message:
            return

        args: List[str] = context.args or []

        if not args:
            # /P ‚Üí ENV'deki SCAN_SYMBOLS, hacme g√∂re sƒ±ralƒ±
            data = await fetch_ticker_data(symbols=SCAN_SYMBOLS, sort_by="volume")
            title = "SCAN_SYMBOLS (Hacme G√∂re)"
        elif args[0].lower() == "d":
            # /P d ‚Üí D√º≈üenler
            data = await fetch_ticker_data(descending=False, limit=20)
            title = "D√º≈ü√º≈ü Trendindeki Coinler"
        elif args[0].isdigit():
            # /P n ‚Üí n sayƒ±da coin
            n: int = min(int(args[0]), 50)  # Maksimum 50 coin g√∂sterilsin
            data = await fetch_ticker_data(descending=True, limit=n)
            title = f"En √áok Y√ºkselen {n} Coin"
        else:
            # /P coin1 coin2... ‚Üí Manuel se√ßim
            data = await fetch_ticker_data(symbols=args)
            title = "Se√ßili Coinler"

        if not data:
            await update.message.reply_text(
                "Veri alƒ±namadƒ± veya e≈üle≈üen sembol bulunamadƒ±."
            )
            return

        report: str = format_report(data, title)

        # Telegram mesaj sƒ±nƒ±rƒ± (4096 karakter) kontrol√º
        if len(report) > 4096:
            report = (
                report[:4000]
                + "\n...\n(Mesaj sƒ±nƒ±rƒ± a≈üƒ±ldƒ±, bazƒ± veriler g√∂sterilemiyor)"
            )

        await update.message.reply_text(report)

    except Exception as e:
        LOG.error(f"/P komutu i≈ülenirken hata: {e}", exc_info=True)
        await update.message.reply_text("Bir hata olu≈ütu. L√ºtfen daha sonra tekrar deneyin.")


def register(application: Application) -> None:
    """
    Telegram botu i√ßin komut i≈üleyicilerini kaydeder.
    
    Args:
        application: Telegram Application instance
    """
    try:
        application.add_handler(CommandHandler("p", p_handler))
        application.add_handler(CommandHandler("P", p_handler))
        LOG.info("P handler ba≈üarƒ±yla kaydedildi.")
    except Exception as e:
        LOG.error(f"P handler kaydedilirken hata: {e}")
