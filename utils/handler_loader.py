# utils/handler_loader.py
import importlib
import pkgutil
import logging
from aiogram import Dispatcher

logger = logging.getLogger(__name__)

async def load_handlers(dispatcher: Dispatcher) -> dict:
    """handlers klas√∂r√ºndeki t√ºm mod√ºlleri y√ºkler ve router'a ekler"""
    results = {"loaded": 0, "failed": 0}

    try:
        import handlers  # handlers klas√∂r√º package olmalƒ± (__init__.py)
    except ImportError as e:
        logger.error(f"‚ùå Handlers package y√ºklenemedi: {e}")
        return results
    
    # T√ºm handler mod√ºllerini senkron olarak import et
    for _, module_name, is_pkg in pkgutil.iter_modules(handlers.__path__):
        if is_pkg:
            continue
        try:
            # Senkron import i≈ülemi - await YOK!
            module = importlib.import_module(f"handlers.{module_name}")
            
            if hasattr(module, "router"):
                dispatcher.include_router(module.router)
                results["loaded"] += 1
                logger.info(f"‚úÖ Handler y√ºklendi: {module_name}")
            else:
                results["failed"] += 1
                logger.warning(f"‚ö†Ô∏è Router bulunamadƒ±: {module_name}")
                
        except ImportError as e:
            results["failed"] += 1
            logger.error(f"‚ùå Handler import edilemedi: {module_name} - {e}")
        except Exception as e:
            results["failed"] += 1
            logger.error(f"‚ùå Handler y√ºklenirken hata: {module_name} - {e}")

    logger.info(f"üìä Handler y√ºkleme sonucu: {results['loaded']} ba≈üarƒ±lƒ±, {results['failed']} ba≈üarƒ±sƒ±z")
    return results


async def clear_handler_cache():
    """Reload i√ßin cache temizleme"""
    import sys
    modules_to_remove = []
    
    for key in list(sys.modules.keys()):
        if key.startswith("handlers."):
            modules_to_remove.append(key)
    
    for module_name in modules_to_remove:
        try:
            del sys.modules[module_name]
            logger.debug(f"üßπ Cache temizlendi: {module_name}")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Cache temizlenemedi {module_name}: {e}")